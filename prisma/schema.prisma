// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String   // Hashed password
  role      String   @default("SALES_AGENT") // SALES_LEAD, SALES_AGENT, MANAGER
  teamId    String?
  team      Team?    @relation(fields: [teamId], references: [id])
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tasksAssigned      Task[]      @relation("AssignedTasks")
  tasksCreated       Task[]      @relation("CreatedTasks")
  activities         Activity[]
  callNotes          CallNote[]
  customersCreated   Customer[]  @relation("CustomerCreator")
  customersAssigned  Customer[]  @relation("CustomerAssignee")
  companiesCreated   Company[]   @relation("CompanyCreator")
  companiesAssigned  Company[]   @relation("CompanyAssignee")

  @@index([teamId])
  @@index([role])
}

model Team {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members User[]
  tasks   Task[]
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  status      String   @default("TODO") // TODO, IN_PROGRESS, COMPLETED, CANCELLED
  priority    String   @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  dueDate     DateTime?
  assigneeId  String?
  assignee    User?    @relation("AssignedTasks", fields: [assigneeId], references: [id])
  createdById String
  createdBy   User     @relation("CreatedTasks", fields: [createdById], references: [id])
  teamId      String?
  team        Team?    @relation(fields: [teamId], references: [id])
  customerId  String?
  customer    Customer? @relation(fields: [customerId], references: [id])
  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([assigneeId])
  @@index([createdById])
  @@index([status])
  @@index([teamId])
  @@index([customerId])
  @@index([companyId])
}

model Activity {
  id          String   @id @default(uuid())
  type        String   // CALL, MEETING, EMAIL, NOTE, OTHER
  title       String
  description String?
  duration    Int? // in minutes
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  customerId  String?
  customer    Customer? @relation(fields: [customerId], references: [id])
  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([customerId])
  @@index([companyId])
  @@index([createdAt])
}

model CallNote {
  id             String   @id @default(uuid())
  clientName     String
  clientCompany  String?
  phoneNumber    String?
  notes          String
  summary        String?
  aiSummary      String?
  outcome        String?
  followUpDate   DateTime?
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  customerId     String?
  customer       Customer? @relation(fields: [customerId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
  @@index([customerId])
  @@index([createdAt])
}

model Customer {
  id          String   @id @default(uuid())
  name        String
  email       String?
  phone       String?
  company     String?
  position    String?
  status      String   @default("LEAD") // LEAD, PROSPECT, CUSTOMER, INACTIVE
  source      String?  // WEBSITE, REFERRAL, COLD_CALL, SOCIAL_MEDIA, TRADE_SHOW, OTHER
  value       Float?   // Deal value in EUR
  notes       String?
  assignedTo  String?  // Sales Agent ID
  createdBy   String   // Creator ID
  companyId   String?  // Company ID reference
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  activities  Activity[]
  callNotes   CallNote[]
  tasks       Task[]
  creator     User     @relation("CustomerCreator", fields: [createdBy], references: [id])
  assignee    User?    @relation("CustomerAssignee", fields: [assignedTo], references: [id])
  companyRef  Company? @relation(fields: [companyId], references: [id])

  @@index([assignedTo])
  @@index([createdBy])
  @@index([status])
  @@index([company])
  @@index([companyId])
}

model Company {
  id              String   @id @default(uuid())
  name            String   @unique
  industry        String?  // TECHNOLOGY, FINANCE, HEALTHCARE, MANUFACTURING, RETAIL, etc.
  size            String?  // STARTUP, SMALL, MEDIUM, LARGE, ENTERPRISE
  revenue         Float?   // Annual revenue in EUR
  employees       Int?     // Number of employees
  website         String?
  address         String?
  city            String?
  country         String?
  phone           String?
  email           String?
  description     String?
  status          String   @default("ACTIVE") // ACTIVE, INACTIVE, PROSPECT, PARTNER
  foundedYear     Int?
  lastContact     DateTime?
  assignedTo      String?  // Sales Agent ID
  createdBy       String   // Creator ID
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  customers       Customer[]
  activities      Activity[]
  tasks           Task[]
  creator         User     @relation("CompanyCreator", fields: [createdBy], references: [id])
  assignee        User?    @relation("CompanyAssignee", fields: [assignedTo], references: [id])

  @@index([assignedTo])
  @@index([createdBy])
  @@index([industry])
  @@index([status])
  @@index([size])
}

