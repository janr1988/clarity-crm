// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String   // Hashed password
  role      String   @default("SALES_AGENT") // SALES_LEAD, SALES_AGENT, MANAGER
  teamId    String?
  team      Team?    @relation(fields: [teamId], references: [id])
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tasksAssigned      Task[]      @relation("AssignedTasks")
  tasksCreated       Task[]      @relation("CreatedTasks")
  activities         Activity[]
  callNotes          CallNote[]
  customersCreated   Customer[]  @relation("CustomerCreator")
  customersAssigned  Customer[]  @relation("CustomerAssignee")
  companiesCreated   Company[]   @relation("CompanyCreator")
  companiesAssigned  Company[]   @relation("CompanyAssignee")
  dealsOwned         Deal[]      @relation("DealOwner")
  dealsCreated       Deal[]      @relation("DealCreator")
  dealNotes          DealNote[]
  targets            Target[]
  capacity           UserCapacity?

  @@index([teamId])
  @@index([role])
}

model Team {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members User[]
  tasks   Task[]
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  status      String   @default("TODO") // TODO, IN_PROGRESS, COMPLETED, CANCELLED
  priority    String   @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  dueDate     DateTime?
  assigneeId  String?
  assignee    User?    @relation("AssignedTasks", fields: [assigneeId], references: [id])
  createdById String
  createdBy   User     @relation("CreatedTasks", fields: [createdById], references: [id])
  teamId      String?
  team        Team?    @relation(fields: [teamId], references: [id])
  customerId  String?
  customer    Customer? @relation(fields: [customerId], references: [id])
  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Capacity Management Fields
  plannedWeek      DateTime? // Start of the week this is planned for (Monday)
  actualStartDate  DateTime? // When it actually started
  actualEndDate    DateTime? // When it was actually completed
  estimatedDuration Int?     // Estimated time in minutes
  actualDuration   Int?      // Actual time spent in minutes
  isPlanned        Boolean   @default(false) // Is this a planned task?
  kanbanStatus     String    @default("TODO") // TODO, IN_PROGRESS, COMPLETED

  @@index([assigneeId])
  @@index([createdById])
  @@index([status])
  @@index([teamId])
  @@index([customerId])
  @@index([companyId])
  @@index([plannedWeek])
  @@index([kanbanStatus])
  @@index([assigneeId, status]) // Common filter combination
  @@index([dueDate]) // For upcoming tasks queries
  @@index([createdAt, status]) // For activity feeds
  @@index([priority, status]) // For priority-based filtering
}

model Activity {
  id          String   @id @default(uuid())
  type        String   // CALL, MEETING, EMAIL, NOTE, OTHER
  title       String
  description String?
  duration    Int? // in minutes
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  customerId  String?
  customer    Customer? @relation(fields: [customerId], references: [id])
  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Capacity Management Fields
  plannedWeek      DateTime? // Start of the week this is planned for (Monday)
  actualDate       DateTime? // When it actually happened
  estimatedDuration Int?     // Estimated duration in minutes
  isPlanned        Boolean   @default(false) // Is this planned?
  kanbanStatus     String    @default("TODO") // TODO, IN_PROGRESS, COMPLETED
  activityType     String    @default("TASK") // TASK, CALL, MEETING, EMAIL

  @@index([userId])
  @@index([customerId])
  @@index([companyId])
  @@index([createdAt])
  @@index([plannedWeek])
  @@index([kanbanStatus])
  @@index([userId, createdAt]) // User activity timeline
  @@index([type, createdAt]) // Activity type filtering
  @@index([customerId, type]) // Customer activity by type
}

model CallNote {
  id             String   @id @default(uuid())
  clientName     String
  clientCompany  String?
  phoneNumber    String?
  notes          String
  summary        String?
  aiSummary      String?
  outcome        String?
  followUpDate   DateTime?
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  customerId     String?
  customer       Customer? @relation(fields: [customerId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
  @@index([customerId])
  @@index([createdAt])
  @@index([userId, createdAt]) // User call notes timeline
  @@index([followUpDate]) // For follow-up reminders
}

model Customer {
  id          String   @id @default(uuid())
  name        String
  email       String?
  phone       String?
  company     String?
  position    String?
  status      String   @default("LEAD") // LEAD, PROSPECT, CUSTOMER, INACTIVE
  source      String?  // WEBSITE, REFERRAL, COLD_CALL, SOCIAL_MEDIA, TRADE_SHOW, OTHER
  value       Float?   // Deal value in EUR
  notes       String?
  assignedTo  String?  // Sales Agent ID
  createdBy   String   // Creator ID
  companyId   String?  // Company ID reference
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  activities  Activity[]
  callNotes   CallNote[]
  tasks       Task[]
  deals       Deal[]
  creator     User     @relation("CustomerCreator", fields: [createdBy], references: [id])
  assignee    User?    @relation("CustomerAssignee", fields: [assignedTo], references: [id])
  companyRef  Company? @relation(fields: [companyId], references: [id])

  @@index([assignedTo])
  @@index([createdBy])
  @@index([status])
  @@index([company])
  @@index([companyId])
  @@index([assignedTo, status]) // Agent's customers by status
  @@index([createdAt, status]) // Customer creation timeline
  @@index([email]) // For email lookups
}

model Company {
  id              String   @id @default(uuid())
  name            String   @unique
  industry        String?  // TECHNOLOGY, FINANCE, HEALTHCARE, MANUFACTURING, RETAIL, etc.
  size            String?  // STARTUP, SMALL, MEDIUM, LARGE, ENTERPRISE
  revenue         Float?   // Annual revenue in EUR
  employees       Int?     // Number of employees
  website         String?
  address         String?
  city            String?
  country         String?
  phone           String?
  email           String?
  description     String?
  status          String   @default("ACTIVE") // ACTIVE, INACTIVE, PROSPECT, PARTNER
  foundedYear     Int?
  lastContact     DateTime?
  assignedTo      String?  // Sales Agent ID
  createdBy       String   // Creator ID
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  customers       Customer[]
  activities      Activity[]
  tasks           Task[]
  deals           Deal[]
  creator         User     @relation("CompanyCreator", fields: [createdBy], references: [id])
  assignee        User?    @relation("CompanyAssignee", fields: [assignedTo], references: [id])

  @@index([assignedTo])
  @@index([createdBy])
  @@index([industry])
  @@index([status])
  @@index([size])
  @@index([assignedTo, status]) // Agent's companies by status
  @@index([industry, size]) // Industry and size filtering
  @@index([createdAt, status]) // Company creation timeline
}

// Deal/Opportunity Model
model Deal {
  id                  String    @id @default(uuid())
  name                String
  customerId          String?
  companyId           String?
  value               Float     // Deal value in EUR
  probability         Int       @default(50) // 0-100%
  stage               String    @default("PROSPECTING") // PROSPECTING, QUALIFICATION, PROPOSAL, NEGOTIATION, CLOSED_WON, CLOSED_LOST
  expectedCloseDate   DateTime?
  actualCloseDate     DateTime?
  source              String?   // Where did this deal come from
  description         String?
  lostReason          String?   // If CLOSED_LOST
  
  // Sales metrics
  daysInStage         Int?      // Days in current stage
  totalDuration       Int?      // Total days from creation to close
  
  // Ownership
  ownerId             String    // Sales Agent
  createdBy           String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // Relations
  customer            Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  company             Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  owner               User      @relation("DealOwner", fields: [ownerId], references: [id])
  creator             User      @relation("DealCreator", fields: [createdBy], references: [id])
  notes               DealNote[]
  
  @@index([ownerId])
  @@index([stage])
  @@index([customerId])
  @@index([companyId])
  @@index([createdAt])
  @@index([ownerId, stage]) // Agent's deals by stage
  @@index([expectedCloseDate]) // For upcoming deals
  @@index([stage, expectedCloseDate]) // Deals by stage and close date
  @@index([value, stage]) // High-value deals by stage
}

// Deal Notes/Updates
model DealNote {
  id        String   @id @default(uuid())
  dealId    String
  content   String
  userId    String
  createdAt DateTime @default(now())
  
  deal      Deal     @relation(fields: [dealId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
  
  @@index([dealId])
  @@index([userId])
}

// Revenue Targets
model Target {
  id          String   @id @default(uuid())
  userId      String?  // Null = Team target
  period      String   // MONTHLY, QUARTERLY, YEARLY
  year        Int
  quarter     Int?     // 1-4
  month       Int?     // 1-12
  targetValue Float    // Target revenue in EUR
  actualValue Float    @default(0)
  
  user        User?    @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([userId, period, year, quarter, month])
  @@index([userId])
  @@index([period])
  @@index([year])
}

// User Capacity Management
model UserCapacity {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  maxItemsPerWeek   Int      @default(8) // Total tasks + calls per week
  workingDays       String   @default("monday,tuesday,wednesday,thursday,friday") // Comma-separated working days
  workingHoursStart Int      @default(9) // Start hour (24-hour format)
  workingHoursEnd   Int      @default(17) // End hour (24-hour format)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([userId])
  @@index([isActive])
}

